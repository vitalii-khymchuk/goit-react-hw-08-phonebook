{"version":3,"file":"static/js/837.17601b84.chunk.js","mappings":"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","sources":["Pages/Contacts/Contacts.jsx","components/ContactsItem/ContactsItem.styled.jsx","components/LinkToContact/LinkToContact.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","components/Error/Error.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","redux/filter/selectors.js"],"sourcesContent":["import ContactsList from 'components/ContactsList';\nimport Filter from 'components/Filter';\nimport Error from 'components/Error';\nimport { useSelector } from 'react-redux';\nimport { Box } from 'components/reusableComponents';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { useFetchContactsQuery } from 'redux/contacts/contactsAPI';\n\nconst Contacts = () => {\n  const filter = useSelector(selectFilter);\n  const { data: contacts = [], error = '' } = useFetchContactsQuery();\n  const filteredContacts = contacts.filter(\n    ({ name, number }) =>\n      name.toLowerCase().includes(filter) || number.includes(filter)\n  );\n  return (\n    <>\n      {error ? (\n        <Error error={error} />\n      ) : (\n        <>\n          <Filter />\n          <Box height=\"700px\" overflowY=\"scroll\">\n            {contacts.length > 0 ? (\n              <ContactsList contacts={filteredContacts} />\n            ) : (\n              <>\n                <h2>There are no contacts here</h2>\n                <h3>You can create the first...</h3>\n              </>\n            )}\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n","import styled from '@emotion/styled';\n\nconst ContactsItemStyled = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  padding: 4px 8px;\n  font-size: 20px;\n`;\n\nconst Avatar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 60px;\n  width: 60px;\n  border-radius: 50%;\n  background-color: black;\n  color: white;\n  font-size: 40px;\n`;\n\nconst ContactName = styled.span`\n  display: block;\n  font-weight: 600;\n  font-size: 24px;\n`;\n\nexport { ContactsItemStyled, Avatar, ContactName };\n","import PropTypes from 'prop-types';\nimport { useLocation, Link } from 'react-router-dom';\nimport { useRef, useEffect } from 'react';\n\nconst LinkToContact = ({ id, children }) => {\n  const linkRef = useRef();\n  const location = useLocation();\n  const prevId = location.state?.id;\n\n  useEffect(() => {\n    if (!linkRef.current) return;\n    if (prevId && prevId === id)\n      linkRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });\n  }, [id, prevId]);\n\n  const pathToContact =\n    location.pathname === '/' ? `contacts/${id}` : id.toString();\n\n  return (\n    <Link ref={linkRef} to={pathToContact} state={{ from: location, id }}>\n      {children}\n    </Link>\n  );\n};\n\nLinkToContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default LinkToContact;\n","import PropTypes from 'prop-types';\nimport { ContactsItemStyled, Avatar, ContactName } from './ContactsItem.styled';\nimport LinkToContact from 'components/LinkToContact';\n\nconst ContactsItem = ({ data: { name, number, extraId } }) => {\n  const avatarLetter = name[0].toUpperCase();\n  return (\n    <>\n      <LinkToContact id={extraId}>\n        <ContactsItemStyled>\n          <Avatar>\n            <span>{avatarLetter}</span>\n          </Avatar>\n          <div>\n            <ContactName>{name}</ContactName>\n            <span>{number}</span>\n          </div>\n        </ContactsItemStyled>\n      </LinkToContact>\n    </>\n  );\n};\n\nContactsItem.propTypes = {\n  data: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    extraId: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactsItem;\n","import PropTypes from 'prop-types';\nimport ContactsItem from 'components/ContactsItem';\nimport { Box } from 'components/reusableComponents';\nconst ContactsList = ({ contacts = [] }) => {\n  return (\n    <Box>\n      <ul>\n        {contacts.length > 0 &&\n          contacts.map(item => <ContactsItem key={item.id} data={item} />)}\n      </ul>\n    </Box>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\nimport { Box } from 'components/reusableComponents';\n\nconst Error = ({ error }) => {\n  const errorMsg = `${error?.data} (status: ${error?.status})`;\n  return (\n    <Box p={15}>\n      <h1>OOOPS...</h1>\n      <h2>Something went wrong</h2>\n      <h2>Please reload page or check URL</h2>\n      <p>Info: {errorMsg}</p>\n    </Box>\n  );\n};\n\nError.propTypes = {\n  msg: PropTypes.string,\n};\nexport default Error;\n","import styled from '@emotion/styled';\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n`;\n\nexport { Input };\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { Input } from './Filter.styled';\nimport { useEffect } from 'react';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  useEffect(() => {\n    return () => {\n      dispatch(setFilter(''));\n    };\n  }, [dispatch]);\n\n  function onChange(e) {\n    const query = e.currentTarget.value;\n    dispatch(setFilter(query));\n  }\n  return (\n    <Input\n      value={filter}\n      name=\"filter\"\n      onChange={onChange}\n      type=\"text\"\n      placeholder=\"Type to search\"\n    />\n  );\n}\n","const selectFilter = state => state.filter;\n\nexport { selectFilter };\n"],"names":["filter","useSelector","selectFilter","useFetchContactsQuery","data","contacts","error","filteredContacts","name","number","toLowerCase","includes","Error","Filter","height","overflowY","length","ContactsList","ContactsItemStyled","styled","Avatar","ContactName","id","children","linkRef","useRef","location","useLocation","prevId","state","useEffect","current","scrollIntoView","behavior","block","pathToContact","pathname","toString","Link","ref","to","from","extraId","avatarLetter","toUpperCase","map","item","errorMsg","status","p","Input","dispatch","useDispatch","setFilter","value","onChange","e","query","currentTarget","type","placeholder"],"sourceRoot":""}